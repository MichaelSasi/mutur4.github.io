<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BinaryExploitation on GILBERT ROBERT M</title>
    <link>https://mutur4.github.io/tags/binaryexploitation/</link>
    <description>Recent content in BinaryExploitation on GILBERT ROBERT M</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>sas</copyright>
    <lastBuildDate>Sun, 06 Mar 2022 20:12:00 +0300</lastBuildDate><atom:link href="https://mutur4.github.io/tags/binaryexploitation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sig-Return Oriented Programming (SROP)</title>
      <link>https://mutur4.github.io/posts/binary-exploitation/srop/</link>
      <pubDate>Sun, 06 Mar 2022 20:12:00 +0300</pubDate>
      
      <guid>https://mutur4.github.io/posts/binary-exploitation/srop/</guid>
      <description>This is a yet another binary exploitation attack that is somewhat similar to return-oriented-programming (ROP) and to understand how this works, we first need to understand how C signals work.
Signals in C Each signal has a current disposition and this is used to determine how a process behaves when it is delivered a signal. The following is used to specify the default disposition for each signal.
- Term : The default action is to terminate the process - Ign: The default action is to ignore the process	- Core: This is used to ignore the process and dump core (core dump file): Some of the signals, their default actions is to terminate and produce a core dump file.</description>
    </item>
    
  </channel>
</rss>
